/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package view;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logic.CantidadLogic;
import logic.FechaLogic;
import logic.SumaLogic;
import model.carritoDatos;
import model.carritoModel;
import model.categoriaDatos;
import model.categoriaModel;
import model.clienteDatos;
import model.clienteModel;
import model.inventarioDatos;
import model.inventarioModel;
import model.ventaDatos;
import model.ventaModel;
import report.reporteFactura;

/**
 *
 * @author mlang
 */
public class moduloVentas extends javax.swing.JInternalFrame {

    /**
     * Creates new form moduloInventario
     */
    //Variable para guardar el dato obtenido del producto
    private ArrayList<Object> productos = new ArrayList();

    //Variable para guardar el dato obtenido del cliente
    private ArrayList<Object> cliente = new ArrayList();

    //ArrayList para almacenar los datos de la consulta
    ArrayList<Object[]> data = new ArrayList<>();
    ArrayList<Object[]> data1 = new ArrayList<>();

    //Creando instancias de modelo y datos
    inventarioModel model = new inventarioModel();
    clienteModel model1 = new clienteModel();
    carritoModel model2 = new carritoModel();
    ventaModel model3 = new ventaModel();
    carritoModel model4 = new carritoModel();
    ventaModel model5 = new ventaModel();
    categoriaModel model6 = new categoriaModel();
    inventarioModel model7 = new inventarioModel();
    inventarioDatos datos = new inventarioDatos();
    clienteDatos datos1 = new clienteDatos();
    carritoDatos datos2 = new carritoDatos();
    ventaDatos datos3 = new ventaDatos();
    categoriaDatos datos4 = new categoriaDatos();

    //Variable para asignar el valor de las categorias
    private ArrayList<Object> valor = new ArrayList<>();

    //Creando el modelo de la tabla
    DefaultTableModel tableModel = new DefaultTableModel();

    //Variable para guardar la cantidad
    private String cantidad = "";

    //Variable para guardar el precio
    private String precio = "";

    //Variale para guardar el total
    private Double total = 0.0;

    //Variable para guardar el ID del producto
    private String idProducto;

    //Variable para guardar el del cliente
    private String idCliente;

    //Varible para guardar el ID de la venta
    private String idVenta;

    //Variable para guardat el ID de la categoria
    private String idCategoria;

    public moduloVentas() {
        initComponents();

        //AÃ±adiendo las columnas a la tabla
        tableModel.addColumn("ID");
        tableModel.addColumn("VENTA");
        tableModel.addColumn("CODIGO");
        tableModel.addColumn("NOMBRE");
        tableModel.addColumn("PRECIO");
        tableModel.addColumn("CANTIDAD");
        tableModel.addColumn("SUBTOTAL");

        //Agregando los datos a la tabla
        tblCarrito.setModel(tableModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCarrito = new javax.swing.JTable();
        btnFacturar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        txtCedulaCliente = new javax.swing.JTextField();
        btnAgregarCliente = new javax.swing.JButton();
        btnBuscarCliente = new javax.swing.JButton();
        txtNombreCliente = new javax.swing.JTextField();
        txtApellidoCliente = new javax.swing.JTextField();
        txtCorreoCliente = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        txtCodigoProducto = new javax.swing.JTextField();
        btnAgregarProducto = new javax.swing.JButton();
        btnBuscarProducto = new javax.swing.JButton();
        txtNombreProducto = new javax.swing.JTextField();
        txtPrecioProducto = new javax.swing.JTextField();
        txtCantidad = new javax.swing.JTextField();
        lblCantidad = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("Ventas");
        setAutoscrolls(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/point-of-sale (1).png"))); // NOI18N

        jPanel1.setBackground(new java.awt.Color(198, 216, 211));

        tblCarrito = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex){
                return false;
            }
        };
        tblCarrito.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblCarrito.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblCarrito.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCarritoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCarrito);

        btnFacturar.setBackground(new java.awt.Color(234, 234, 234));
        btnFacturar.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        btnFacturar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/file-invoice-dollar (1).png"))); // NOI18N
        btnFacturar.setText("Facturar");
        btnFacturar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFacturarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        jLabel1.setText("IVA: 13%");

        lblTotal.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        lblTotal.setText("TOTAL: ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(57, 57, 57)
                        .addComponent(lblTotal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnFacturar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 803, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFacturar)
                    .addComponent(jLabel1)
                    .addComponent(lblTotal))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cliente", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans", 1, 12))); // NOI18N

        txtCedulaCliente.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        txtCedulaCliente.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cedula", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans", 1, 14))); // NOI18N

        btnAgregarCliente.setBackground(new java.awt.Color(234, 234, 234));
        btnAgregarCliente.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        btnAgregarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/plus.png"))); // NOI18N
        btnAgregarCliente.setText("Agregar");
        btnAgregarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarClienteActionPerformed(evt);
            }
        });

        btnBuscarCliente.setBackground(new java.awt.Color(234, 234, 234));
        btnBuscarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/search.png"))); // NOI18N
        btnBuscarCliente.setBorderPainted(false);
        btnBuscarCliente.setContentAreaFilled(false);
        btnBuscarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarClienteActionPerformed(evt);
            }
        });

        txtNombreCliente.setEditable(false);
        txtNombreCliente.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        txtNombreCliente.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nombre", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans", 1, 14))); // NOI18N

        txtApellidoCliente.setEditable(false);
        txtApellidoCliente.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        txtApellidoCliente.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Apellido", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans", 1, 14))); // NOI18N

        txtCorreoCliente.setEditable(false);
        txtCorreoCliente.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        txtCorreoCliente.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Correo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans", 1, 14))); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtCedulaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(btnBuscarCliente)
                .addGap(18, 18, 18)
                .addComponent(txtNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtApellidoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCorreoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAgregarCliente)
                .addGap(55, 55, 55))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtNombreCliente)
                        .addComponent(txtApellidoCliente)
                        .addComponent(txtCorreoCliente))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtCedulaCliente)
                                .addComponent(btnBuscarCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(btnAgregarCliente))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Producto", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans", 1, 12))); // NOI18N

        txtCodigoProducto.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        txtCodigoProducto.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Codigo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans", 1, 14))); // NOI18N

        btnAgregarProducto.setBackground(new java.awt.Color(234, 234, 234));
        btnAgregarProducto.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        btnAgregarProducto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/plus.png"))); // NOI18N
        btnAgregarProducto.setText("Agregar");
        btnAgregarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarProductoActionPerformed(evt);
            }
        });

        btnBuscarProducto.setBackground(new java.awt.Color(234, 234, 234));
        btnBuscarProducto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/search.png"))); // NOI18N
        btnBuscarProducto.setBorderPainted(false);
        btnBuscarProducto.setContentAreaFilled(false);
        btnBuscarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarProductoActionPerformed(evt);
            }
        });

        txtNombreProducto.setEditable(false);
        txtNombreProducto.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        txtNombreProducto.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nombre", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans", 1, 14))); // NOI18N

        txtPrecioProducto.setEditable(false);
        txtPrecioProducto.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        txtPrecioProducto.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Precio", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans", 1, 14))); // NOI18N

        txtCantidad.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        txtCantidad.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cantidad", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Sans", 1, 14))); // NOI18N

        lblCantidad.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtCodigoProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(btnBuscarProducto)
                .addGap(18, 18, 18)
                .addComponent(txtNombreProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPrecioProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblCantidad)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(btnAgregarProducto)
                .addGap(55, 55, 55))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtNombreProducto)
                        .addComponent(txtPrecioProducto)
                        .addComponent(txtCantidad)
                        .addComponent(lblCantidad))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtCodigoProducto)
                                .addComponent(btnBuscarProducto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(btnAgregarProducto))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarClienteActionPerformed
        //Atributos
        model3.setOPCION(0);
        model3.setUSUARIO("MAURICE.LANG");
        model3.setPK_TBL_PMK_VENTA(0);

        model3.setID_CLIENTE(Integer.parseInt(idCliente));
        model3.setFECHA(FechaLogic.obtenerFechaActual());
        model3.setTOTAL(0.0);

        //Condicional para saber si se hizo la transaccion
        if (datos3.ingresar(model3)) {
            JOptionPane.showMessageDialog(null, "Se ha creado la venta con exito");

            model5.setOPCION(1);
            model5.setUSUARIO("MAURICE.LANG");
            model5.setPK_TBL_PMK_VENTA(0);
            model5.setID_CLIENTE(0);
            model5.setFECHA("");
            model5.setTOTAL(0.0);

            data = null;
            tableModel.setRowCount(0);

            data = datos3.obtenerDatos(model5);

            idVenta = data.get(0)[0].toString();

            btnAgregarCliente.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(null, "Error al crear la venta");
            btnAgregarCliente.setEnabled(true);
        }
    }//GEN-LAST:event_btnAgregarClienteActionPerformed

    private void tblCarritoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCarritoMouseClicked
        //Condicional para saber si da doble click
        if (evt.getClickCount() == 2) {
            //Obtiene la posicion donde se hizo el click
            int filaSeleccionada = tblCarrito.getSelectedRow();
            //Se realiza una condicional para determinar si la fila seleccionada es mayor o igual a 0
            if (filaSeleccionada >= 0) {
                //Se crea una instacia de ArrayList
                ArrayList<Object> datosFila = new ArrayList<>();
                //Se empieza a recorrer la tabla para obtener los valores de la fila seleccionada
                for (int i = 0; i < tableModel.getColumnCount(); i++) {
                    datosFila.add(tableModel.getValueAt(filaSeleccionada, i));
                }

                //Se guardan los datos en el modelo para despues eliminarlo del carrito
                model2.setOPCION(1);
                model2.setUSUARIO("MAURICE.LANG");
                model2.setPK_TBL_PMK_CARRITO(Integer.parseInt(datosFila.get(0).toString()));
                model2.setID_VENTA(Integer.parseInt(datosFila.get(1).toString()));
                model2.setID_PRODUCTO(0);
                model2.setCANTIDAD(Integer.parseInt(datosFila.get(5).toString()));
                model2.setSUBTOTAL(Double.parseDouble(datosFila.get(6).toString()));

                //Condicional para saber si se hizo la transaccion
                if (datos2.eliminar(model2)) {
                    JOptionPane.showMessageDialog(null, "Producto eliminado del carrito");
                    limpiar();

                    model4.setOPCION(0);
                    model4.setUSUARIO("MAURICE.LANG");
                    model4.setPK_TBL_PMK_CARRITO(0);
                    model4.setID_VENTA(Integer.parseInt(datosFila.get(1).toString()));
                    model4.setID_PRODUCTO(0);
                    model4.setCANTIDAD(0);
                    model4.setSUBTOTAL(0.0);

                    data = null;
                    tableModel.setRowCount(0);

                    data = datos2.obtenerDatos(model4);

                    for (Object[] fila : data) {
                        tableModel.addRow(fila);
                    }

                    //Agregando los datos a la tabla
                    tblCarrito.setModel(tableModel);

                    model7.setOPCION(0);
                    model7.setUSUARIO("MAURICE.LANG");
                    model7.setCANTIDAD(0);
                    model7.setCODIGO(datosFila.get(2).toString());
                    model7.setID_CATEGORIA(0);
                    model7.setNOMBRE("");
                    model7.setPRECIO(0.0);
                    model7.setTIPO_ANIMAL("");

                    data1 = datos.obtenerDatos(model7);

                    CantidadLogic compra = new CantidadLogic(Integer.parseInt(data1.get(0)[5].toString()), Integer.parseInt(datosFila.get(5).toString()));

                    model.setOPCION(0);
                    model.setUSUARIO("MAURICE.LANG");
                    model.setCANTIDAD(compra.cantidadNueva());
                    if (!productos.isEmpty()) {
                        model.setPK_TBL_PMK_INVENTARIO(Integer.parseInt(productos.get(0).toString()));
                        model.setCODIGO(productos.get(1).toString());
                        model.setNOMBRE(productos.get(2).toString());
                        model.setTIPO_ANIMAL(productos.get(3).toString());
                        model.setPRECIO(Double.parseDouble(productos.get(4).toString()));
                        model.setID_CATEGORIA(Integer.parseInt(idCategoria));
                    }

                    data.clear();

                    total -= Double.parseDouble(datosFila.get(6).toString());

                    SumaLogic suma1 = new SumaLogic(total);

                    lblTotal.setText("TOTAL: Â¢" + suma1.totalConIVA());

                    if (datos.modificar(model)) {
                        System.out.println("Se actualizo la base de datos");
                    } else {
                        System.out.println("No se actualizo la base de datos");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Error al eliminar el producto");
                }
            }
        }
    }//GEN-LAST:event_tblCarritoMouseClicked

    private void btnAgregarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarProductoActionPerformed
        //Crear instancia para metodo de cantidad
        CantidadLogic compra = new CantidadLogic(Integer.parseInt(cantidad), Integer.parseInt(txtCantidad.getText()));

        //Condicion para evitar que se pueda comprar mas de la cantidad en inventario
        if (!compra.sePuedeComprar()) {
            JOptionPane.showMessageDialog(null, "No hay existencias suficientes");
        } else {
            SumaLogic suma = new SumaLogic(Double.parseDouble(precio), Integer.parseInt(txtCantidad.getText()));

            model2.setOPCION(0);
            model2.setUSUARIO("MAURICE.LANG");
            model2.setPK_TBL_PMK_CARRITO(0);
            model2.setID_VENTA(Integer.parseInt(idVenta));
            model2.setID_PRODUCTO(Integer.parseInt(idProducto));
            model2.setCANTIDAD(Integer.parseInt(txtCantidad.getText()));
            model2.setSUBTOTAL(suma.subtotalObtenido());

            //Condicional para saber si se hizo la transaccion
            if (datos2.ingresar(model2)) {
                JOptionPane.showMessageDialog(null, "Producto agregado del carrito");
                limpiar();

                model4.setOPCION(0);
                model4.setUSUARIO("MAURICE.LANG");
                model4.setPK_TBL_PMK_CARRITO(0);
                model4.setID_VENTA(Integer.parseInt(idVenta));
                model4.setID_PRODUCTO(0);
                model4.setCANTIDAD(0);
                model4.setSUBTOTAL(0.0);

                data = null;
                tableModel.setRowCount(0);

                data = datos2.obtenerDatos(model4);

                for (Object[] fila : data) {
                    tableModel.addRow(fila);
                }

                //Agregando los datos a la tabla
                tblCarrito.setModel(tableModel);

                //Funcion para mostrar el total
                total += suma.subtotalObtenido();
                SumaLogic suma1 = new SumaLogic(total);

                lblTotal.setText("TOTAL: Â¢" + suma1.totalConIVA());

                model.setOPCION(0);
                model.setUSUARIO("MAURICE.LANG");
                model.setCANTIDAD(compra.cantidadSobrante());
                if (!productos.isEmpty()) {
                    model.setPK_TBL_PMK_INVENTARIO(Integer.parseInt(productos.get(0).toString()));
                    model.setCODIGO(productos.get(1).toString());
                    model.setNOMBRE(productos.get(2).toString());
                    model.setTIPO_ANIMAL(productos.get(3).toString());
                    model.setPRECIO(Double.parseDouble(productos.get(4).toString()));
                    model.setID_CATEGORIA(Integer.parseInt(idCategoria));
                }

                data.clear();

                if (datos.modificar(model)) {
                    System.out.println("Se actualizo la base de datos");
                } else {
                    System.out.println("No se actualizo la base de datos");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Error al ingresar el producto");
            }
        }
    }//GEN-LAST:event_btnAgregarProductoActionPerformed

    private void btnBuscarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarProductoActionPerformed
        //Condicional para saber si se tiene que abrir el modal o se tiene que buscar
        if (!txtCodigoProducto.getText().equals("")) {
            String valor = txtCodigoProducto.getText();

            //Asignando valores a los atributos
            model.setOPCION(0);
            model.setPK_TBL_PMK_INVENTARIO(0);
            model.setUSUARIO("MAURICE.LANG");
            model.setCANTIDAD(0);
            model.setCODIGO(valor);
            model.setNOMBRE("");
            model.setPRECIO(0.0);
            model.setTIPO_ANIMAL("");
            model.setID_CATEGORIA(0);

            data.clear();
            //Guardando los datos en la arraylist
            data = datos.obtenerDatos(model);

            if (!data.isEmpty()) {
                //Asignando los datos en los textfield
                idProducto = data.get(0)[0].toString();
                txtNombreProducto.setText(data.get(0)[2].toString());
                txtPrecioProducto.setText(data.get(0)[4].toString());
                precio = data.get(0)[4].toString();

                if (Integer.parseInt(data.get(0)[5].toString()) > 5) {
                    lblCantidad.setText("EN STOCK");
                    lblCantidad.setForeground(Color.GREEN);
                    cantidad = data.get(0)[5].toString();
                } else {
                    lblCantidad.setText("QUEDAN: " + data.get(0)[5].toString());
                    lblCantidad.setForeground(Color.RED);
                    cantidad = data.get(0)[5].toString();
                }

                if (data.size() > 0) {
                    if (productos.size() < 7) {
                        productos.addAll(Arrays.asList(new String[7 - productos.size()]));
                    }
                    productos.set(0, data.get(0)[0].toString());
                    productos.set(1, data.get(0)[1].toString());
                    productos.set(2, data.get(0)[2].toString());
                    productos.set(3, data.get(0)[3].toString());
                    productos.set(4, data.get(0)[4].toString());
                    productos.set(5, data.get(0)[5].toString());
                    productos.set(6, data.get(0)[6].toString());
                }

                model6.setOPCION(0);
                model6.setUSUARIO("MAURICE.LANG");
                model6.setPK_TBL_PMK_CATEGORIA(0);
                model6.setCATEGORIA(data.get(0)[6].toString());

                data.clear();

                data = datos4.obtenerDatos(model6);

                idCategoria = data.get(0)[0].toString();
            } else {
                JOptionPane.showMessageDialog(null, "No se encontro el producto");
            }

            data.clear();

        } else {
            //Creamos una instancia del modal
            ProductoForm fm = new ProductoForm(this, true);
            //Colocamos el modal en media pantalla
            fm.setLocationRelativeTo(null);
            //Mostramos el modal
            fm.setVisible(true);
            //Guardamos el valor obtenido
            idCategoria = fm.obtenerId();

            productos = fm.obtenerValor();

            //Validamos si categorias no es null
            if (!productos.isEmpty()) {
                //Asignamos valor a los textFields
                idProducto = productos.get(0).toString();
                txtCodigoProducto.setText(productos.get(1).toString());
                txtNombreProducto.setText(productos.get(2).toString());
                txtPrecioProducto.setText(productos.get(4).toString());
                precio = productos.get(4).toString();

                if (Integer.parseInt(productos.get(5).toString()) > 5) {
                    lblCantidad.setText("EN STOCK");
                    lblCantidad.setForeground(Color.GREEN);
                    cantidad = productos.get(5).toString();
                } else {
                    lblCantidad.setText("QUEDAN: " + productos.get(5).toString());
                    lblCantidad.setForeground(Color.RED);
                    cantidad = productos.get(5).toString();
                }
            }
        }
    }//GEN-LAST:event_btnBuscarProductoActionPerformed

    private void btnBuscarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarClienteActionPerformed
        //Condicional para saber si se tiene que abrir el modal o se tiene que buscar
        if (!txtCedulaCliente.getText().equals("")) {
            String valor = txtCedulaCliente.getText();

            //Asignando valores a los atributos
            model1.setOPCION(0);
            model1.setPK_TBL_PMK_CLIENTE(0);
            model1.setUSUARIO("MAURICE.LANG");
            model1.setCEDULA(valor);
            model1.setNOMBRE("");
            model1.setAPELLIDO1("");

            data.clear();

            //Guardando los datos en la arraylist
            data = datos1.obtenerDatos(model1);

            if (!data.isEmpty()) {
                //Asignando los datos en los textfield
                idCliente = data.get(0)[0].toString();
                txtCedulaCliente.setText(data.get(0)[1].toString());
                txtNombreCliente.setText(data.get(0)[2].toString());
                txtApellidoCliente.setText(data.get(0)[3].toString());
                txtCorreoCliente.setText(data.get(0)[5].toString());
            } else {
                JOptionPane.showMessageDialog(null, "No se encontro el cliente");
            }

            data.clear();
        } else {
            //Creamos una instancia del modal
            ClienteForm fm = new ClienteForm(this, true);
            //Colocamos el modal en media pantalla
            fm.setLocationRelativeTo(null);
            //Mostramos el modal
            fm.setVisible(true);
            //Guardamos el valor obtenido
            cliente = fm.obtenerValor();

            //Validamos si categorias no es null
            if (!cliente.isEmpty()) {
                //Asignamos valor a los textFields
                idCliente = cliente.get(0).toString();
                txtCedulaCliente.setText(cliente.get(1).toString());
                txtNombreCliente.setText(cliente.get(2).toString());
                txtApellidoCliente.setText(cliente.get(3).toString());
                txtCorreoCliente.setText(cliente.get(5).toString());
            }
        }
    }//GEN-LAST:event_btnBuscarClienteActionPerformed

    private void btnFacturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFacturarActionPerformed
        /*model5.setOPCION(0);
        model5.setUSUARIO("MAURICE.LANG");
        model5.setPK_TBL_PMK_VENTA(Integer.parseInt(idVenta));
        model5.setFECHA(FechaLogic.obtenerFechaActual());
        model5.setID_CLIENTE(Integer.parseInt(idCliente));
        model5.setTOTAL(Double.parseDouble(lblTotal.getText()));

        if (datos3.modificar(model5)) {
            System.out.println("Se actualizo la clase");
            limpiar2();

        } else {
            System.out.println("No se actualizo la clase");
        }*/
        reporteFactura report = new reporteFactura();
        report.reporte(Long.parseLong("1"));
    }//GEN-LAST:event_btnFacturarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarCliente;
    private javax.swing.JButton btnAgregarProducto;
    private javax.swing.JButton btnBuscarCliente;
    private javax.swing.JButton btnBuscarProducto;
    private javax.swing.JButton btnFacturar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCantidad;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTable tblCarrito;
    private javax.swing.JTextField txtApellidoCliente;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtCedulaCliente;
    private javax.swing.JTextField txtCodigoProducto;
    private javax.swing.JTextField txtCorreoCliente;
    private javax.swing.JTextField txtNombreCliente;
    private javax.swing.JTextField txtNombreProducto;
    private javax.swing.JTextField txtPrecioProducto;
    // End of variables declaration//GEN-END:variables

    private void limpiar() {
        idProducto = "";
        txtCodigoProducto.setText("");
        txtNombreProducto.setText("");
        txtPrecioProducto.setText("");
        txtCantidad.setText("");
        lblCantidad.setText("");
    }

    private void limpiar2() {
        idCliente = "";
        txtCedulaCliente.setText("");
        txtNombreCliente.setText("");
        txtApellidoCliente.setText("");
        txtCorreoCliente.setText("");
        tableModel.setRowCount(0);
    }
}
